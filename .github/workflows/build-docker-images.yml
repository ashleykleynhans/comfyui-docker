name: Build and Push Docker Images

on:
  push:
    branches:
      - main
    paths:
      - 'docker-bake.hcl'
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.extract.outputs.release }}
      release_suffix: ${{ steps.extract.outputs.release_suffix }}
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Extract RELEASE and RELEASE_SUFFIX from docker-bake.hcl
        id: extract
        run: |
          RELEASE=$(grep 'variable "RELEASE"' -A 2 docker-bake.hcl | grep 'default' | sed 's/.*"\(.*\)"/\1/')
          RELEASE_SUFFIX=$(grep 'variable "RELEASE_SUFFIX"' -A 2 docker-bake.hcl | grep 'default' | sed 's/.*"\(.*\)"/\1/')
          echo "release=${RELEASE}" >> $GITHUB_OUTPUT
          echo "release_suffix=${RELEASE_SUFFIX}" >> $GITHUB_OUTPUT
          echo "Current RELEASE: ${RELEASE}"
          echo "Current RELEASE_SUFFIX: ${RELEASE_SUFFIX}"

      - name: Check if RELEASE or RELEASE_SUFFIX changed
        id: check
        run: |
          # For manual triggers, always build
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Manual trigger - will build"
            exit 0
          fi

          # Check if docker-bake.hcl was modified
          git diff HEAD^ HEAD docker-bake.hcl > /tmp/diff.txt

          if grep -E '^\+.*variable "(RELEASE|RELEASE_SUFFIX)"' /tmp/diff.txt || \
             grep -E '^\+.*default = ' /tmp/diff.txt | grep -E '(RELEASE|RELEASE_SUFFIX)' -B 2; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "RELEASE or RELEASE_SUFFIX changed - will build"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "No RELEASE or RELEASE_SUFFIX changes detected - skipping build"
          fi

  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      images: ${{ steps.list-images.outputs.images }}
      images_json: ${{ steps.list-images.outputs.images_json }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          # Remove unnecessary files to free up disk space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune -af
          sudo docker container prune -f
          sudo apt-get clean
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-flags: --debug

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push all images (serially)
        env:
          REGISTRY: ghcr.io
          REGISTRY_USER: ${{ github.repository_owner }}
        run: |
          # Build images one at a time to avoid resource exhaustion
          # Each image is 12-14GB so parallel builds would fail

          echo "Building cu124-py311..."
          docker buildx bake --push cu124-py311
          docker buildx prune -af
          df -h

          echo "Building cu124-py312..."
          docker buildx bake --push cu124-py312
          docker buildx prune -af
          df -h

          echo "Building cu128-py311..."
          docker buildx bake --push cu128-py311
          docker buildx prune -af
          df -h

          echo "Building cu128-py312..."
          docker buildx bake --push cu128-py312
          docker buildx prune -af
          df -h

          echo "All images built successfully!"

      - name: List built images
        id: list-images
        run: |
          RELEASE="${{ needs.detect-changes.outputs.release }}"
          RELEASE_SUFFIX="${{ needs.detect-changes.outputs.release_suffix }}"
          REGISTRY="ghcr.io"
          REGISTRY_USER="${{ github.repository_owner }}"
          APP="comfyui"

          # Create array of images
          IMAGES=(
            "${REGISTRY}/${REGISTRY_USER}/${APP}:cu124-py311-${RELEASE}${RELEASE_SUFFIX}"
            "${REGISTRY}/${REGISTRY_USER}/${APP}:cu124-py312-${RELEASE}${RELEASE_SUFFIX}"
            "${REGISTRY}/${REGISTRY_USER}/${APP}:cu128-py311-${RELEASE}${RELEASE_SUFFIX}"
            "${REGISTRY}/${REGISTRY_USER}/${APP}:cu128-py312-${RELEASE}${RELEASE_SUFFIX}"
          )

          # Create newline-separated list
          IMAGES_LIST=$(printf '%s\n' "${IMAGES[@]}")

          # Create JSON array for easier parsing by third-party tools
          IMAGES_JSON=$(printf '%s\n' "${IMAGES[@]}" | jq -R -s -c 'split("\n") | map(select(length > 0))')

          # Output for GitHub Actions
          echo "images<<EOF" >> $GITHUB_OUTPUT
          echo "$IMAGES_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "images_json=${IMAGES_JSON}" >> $GITHUB_OUTPUT

          # Also write to a file that can be downloaded
          echo "$IMAGES_LIST" > built-images.txt
          echo "$IMAGES_JSON" > built-images.json

      - name: Upload image list artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-list
          path: |
            built-images.txt
            built-images.json
          retention-days: 90

      - name: Display built images
        run: |
          echo "Successfully built and pushed the following images:"
          cat built-images.txt
          echo ""
          echo "JSON format:"
          cat built-images.json

  create-summary:
    needs: [detect-changes, build-and-push]
    if: needs.detect-changes.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create job summary
        run: |
          echo "## Docker Images Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** ${{ needs.detect-changes.outputs.release }}${{ needs.detect-changes.outputs.release_suffix }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Pushed to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.build-and-push.outputs.images }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### JSON Format (for APIs):" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.build-and-push.outputs.images_json }}" | jq '.' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ“¦ Download the image list from the artifacts section above." >> $GITHUB_STEP_SUMMARY
